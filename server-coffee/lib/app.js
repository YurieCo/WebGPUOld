// Generated by CoffeeScript 1.3.3
(function() {
  var MemoryStore, address, app, attempts, config, current_mp, current_user, daemon, decode, enableThrottle, express, flash, fs, i_am_debugging_submit, ifaces, is_authenticated, jade, log, login, markdown, oauth, os, path, port, scheduler, server, throttle, _,
    _this = this;

  _ = require('underscore');

  express = require('express');

  fs = require('fs');

  path = require('path');

  flash = require('connect-flash');

  jade = require('jade');

  MemoryStore = require('connect').session.MemoryStore;

  markdown = (require('node-markdown')).Markdown;

  config = require('./config');

  attempts = (require('./db')).AttemptsProvider;

  oauth = require('./auth');

  scheduler = require('./scheduler');

  login = require('./login');

  daemon = require('./daemon_interactor');

  log = (require('./log')).log;

  app = express();

  address = null;

  current_user = function(req) {
    if (req.session.user_id === 'xx_test' || req.session.user_id === 'xx_guest') {
      return req.session.user_id;
    } else if (req.session.user_data != null) {
      if (_.isString(req.session.user_data)) {
        req.session.user_data = JSON.parse(req.session.user_data);
      }
      return req.session.user_data.id;
    } else {
      return "unknown_user";
    }
  };

  app.configure(function() {
    app.set('port', config.port);
    app.set('view engine', 'jade');
    app.use('/public', express["static"](__dirname + '/../public'));
    app.set('views', __dirname + '/../views');
    app.use(express.methodOverride());
    app.use(express.bodyParser());
    app.use(express.errorHandler({
      dumpExceptions: true,
      showStack: true
    }));
    app.use(express.cookieParser());
    app.use(express.session({
      secret: "coursera course",
      store: new MemoryStore({
        reapInterval: 60000 * 10
      })
    }));
    app.use(flash());
    app.locals(function(req, res) {
      return {
        session: req.session,
        flash: req.flash
      };
    });
    return app.use(app.router);
  });

  app.get('/index.html', function(req, res) {
    return res.render('index', {
      title: "Heterogeneous Parallel Programming"
    });
  });

  app.get('/', function(req, res) {
    return res.redirect('/index.html');
  });

  is_authenticated = function(req, res, next) {
    if (req.session.user_id === 'xx_test' || req.session.user_id === 'xx_guest' || (req.session.user_data != null)) {
      return next();
    } else {
      return res.redirect('/login');
    }
  };

  app.get('/xx_test', function(req, res) {
    req.session.user_id = 'xx_test';
    return res.redirect(req.body.redirect || '/mp/1');
  });

  app.get('/xx_guest', function(req, res) {
    req.session.user_id = 'xx_guest';
    return res.redirect(req.body.redirect || '/mp/1');
  });

  current_mp = 1;

  app.get('/oauth_login', function(req, res) {
    return oauth.login(req, res);
  });

  app.get('/oauth_login/callback', function(req, res) {
    return oauth.login_callback(req, res, "/mp/0");
  });

  app.get('/login', function(req, res) {
    return res.render("login");
  });

  app.post('/login', function(req, res) {
    var post;
    post = req.body;
    return login.valid_password(post.user, post.password, function(err, valid) {
      if (err) {
        return res.render('500');
      } else if (valid) {
        req.session.user_data = {id: post.user};
        return res.redirect('/mp/' + current_mp);
      } else {
        return res.redirect('/login');
      }
    });
  });

  app.post('/signup', function(req, res) {
    var post;
    post = req.body;
    return login.add_user(post, function(err, obj) {
      if (err) {
        return res.render('500');
      } else {
        req.session.user_id = post.user;
        return res.redirect('/mp/' + current_mp);
      }
    });
  });

  app.get('/signup', function(req, res) {
    return res.render("signup");
  });

  app.post('/register_slave', function(req, res) {
    var body;
    body = req.body;
    return scheduler.add_daemon(body.address, body.port, function(err, data) {
      if (err) {
        return console.log('failed to register slave ' + req.body.address);
      }
    });
  });

  app.get('/is_registered', function(req, res) {
    return scheduler.has_daemon(req.body.address, function(has_daemon) {
      return res.send({
        is_registered: has_daemon
      });
    });
  });

  i_am_debugging_submit = false;

  decode = function(encoded) {
    var buffer;
    buffer = new Buffer(encoded || '', 'base64');
    return buffer.toString('utf8');
  };

  throttle = function(user, mp_id, call_back) {
    return attempts.last_attempt_date(user, mp_id, call_back);
  };

  enableThrottle = true;

  app.post('/mp/:id/save_program', function(req, res) {
    var mp_id, program, user;
    mp_id = parseInt(req.params.id);
    if (mp_id > current_mp) {
      return;
    }
    if (req.body === null) {
      return;
    }
    user = current_user(req);
    if (user === "unknown_user") {
      return;
    }
    program = req.body.Data;
    if (!(_.isString(program))) {
      return;
    }
    return attempts.add_attempt(user, mp_id, {
      "saved_program": program
    }, function(err) {
      return res.send({
        "status": "success"
      });
    });
  });

  app.post('/mp/:id/submit', function(req, res) {
    var data, dataset_id, mp_id, program, user;
    if (i_am_debugging_submit && fs.existsSync('test_response.json')) {
      data = JSON.parse(fs.readFileSync('test_response.json', 'ascii'));
      res.send(data);
    } else {
      mp_id = parseInt(req.params.id);
      if (mp_id > current_mp) {
        res.render('404', {
          msg: "Invalid mp"
        });
        return;
      }
      if (req.body === null) {
        res.render('404', {
          msg: "Server is busy"
        });
        return;
      } else {
        try {
          if (req.session.user_id === 'test') {
            req.body = (_.keys(req.body))[0];
            req.body = decode(req.body);
            req.body = JSON.parse(req.body);
            req.body.Data = decode(req.body.Data);
          }
        } catch (e) {
          res.render('404', {
            msg: "Invalid program"
          });
          return;
        }
        if (req.body.dataset_id != null) {
          dataset_id = parseInt(req.body.dataset_id);
        } else {
          dataset_id = 0;
        }
        program = req.body.Data;
      }
      user = current_user(req);
      return throttle(user, mp_id, function(err, last_submission_date) {
        if (enableThrottle && (typeof last_attempt_date !== "undefined" && last_attempt_date !== null) && (new Date() - last_submission_date) < 5000) {
          res.send({
            "Throttled": "Throttled"
          });
        } else {
          attempts.add_attempt(user, mp_id, {
            "submitted_program": program
          }, function(err) {
            return {};
          });
          if (!(_.isString(program)) || program === '') {
            res.render('404', {
              msg: "Invalid program"
            });
            return;
          }
          return scheduler.run_on_free_daemon(function(err, host, port) {
            var do_computation;
            if (err) {
              res.render('404', {
                msg: "Server is busy"
              });
              return;
            }
            do_computation = function(err) {
              if (err) {
                res.render('500');
                return;
              }
              return daemon.compute(host, port, mp_id, {
                data_id: dataset_id,
                program: program
              }, function(err, _r, body) {
                if (i_am_debugging_submit) {
                  fs.writeFileSync('test_response.json', JSON.stringify(body), 'ascii');
                }
                if (err) {
                  res.render('500');
                } else if (body.status === 'success') {
                  body.ProgramText = program;
                  attempts.add_attempt(user, mp_id, body, function(err) {
                    return {};
                  });
                  return res.send(body);
                } else if (body.status === 'missing config') {
                  return daemon.send_config(host, port, mp_id, function(err) {
                    if (err != null) {
                      return res.render('500');
                    } else {
                      return do_computation();
                    }
                  });
                } else if (body.status === 'missing dataset') {
                  return daemon.send_data(host, port, mp_id, function(err) {
                    if (err != null) {
                      res.render('500');
                    } else {
                      return do_computation(err);
                    }
                  });
                }
              });
            };
            return do_computation();
          });
        }
      });
    }
  });

  app.get('/404', function(req, res) {
    return res.render('404');
  });

  app.get('/500', function(req, res) {
    return res.render('500');
  });

  app.get('/help', function(req, res) {
    return res.render('help', {
      title: "Help"
    });
  });

  app.get('/description', function(req, res) {
    var file_path;
    file_path = path.join('..', 'mp', 'description', 'description.txt');
    if (!fs.existsSync(file_path)) {
      return res.render('404', {
        msg: file_path + ' was not found'
      });
    } else {
      return fs.readFile(file_path, 'ascii', function(err, data) {
        var html;
        if (err) {
          return res.render('404', {
            msg: 'Unable to read ' + file_path
          });
        } else {
          html = markdown(data);
          return res.send(html);
        }
      });
    }
  });

  app.get('/description_images/org/:file', function(req, res) {
    var file, file_path;
    file = req.params.file;
    file_path = path.join('..', 'mp', 'description', 'images', 'org', file);
    return fs.readFile(file_path, 'binary', function(err, data) {
      if (err) {
        return res.render('404', {
          msg: 'Unable to read ' + file_path
        });
      } else {
        res.writeHead(200, {
          'Content-Type': 'image/png'
        });
        return res.end(data, 'binary');
      }
    });
  });

  app.get('/description_images/:file', function(req, res) {
    var file, file_path;
    file = req.params.file;
    file_path = path.join('..', 'mp', 'description', 'images', file);
    return fs.readFile(file_path, 'binary', function(err, data) {
      if (err) {
        return res.render('404', {
          msg: 'Unable to read ' + file_path
        });
      } else {
        res.writeHead(200, {
          'Content-Type': 'image/png'
        });
        return res.end(data, 'binary');
      }
    });
  });

  app.get('/mp/:id/description', function(req, res) {
    var id, mp_path;
    id = req.params.id;
    if (_.isString(id)) {
      id = parseInt(id);
      id = "" + id;
    }
    mp_path = path.join('..', 'mp', id, 'description.txt');
    if (!fs.existsSync(mp_path)) {
      return res.render('404', {
        msg: mp_path + ' was not found'
      });
    } else {
      return fs.readFile(mp_path, 'ascii', function(err, data) {
        var html;
        if (err) {
          return res.render('404', {
            msg: 'Unable to read ' + mp_path
          });
        } else {
          html = markdown(data);
          return res.send(html);
        }
      });
    }
  });

  app.get('/mp/:id/config', function(req, res) {
    var config_path, id;
    id = req.params.id;
    if (_.isString(id)) {
      id = parseInt(id);
      id = "" + id;
    }
    config_path = path.join('..', 'mp', id, 'config.txt');
    if (!fs.existsSync(config_path)) {
      return res.render('404', {
        msg: config_path + ' was not found'
      });
    } else {
      return fs.readFile(config_path, 'ascii', function(err, data) {
        if (err) {
          return res.render('404', {
            msg: 'Unable to read ' + mp_path
          });
        } else {
          return res.send(JSON.parse(data));
        }
      });
    }
  });

  app.get('/mp/:id/program', is_authenticated, function(req, res) {
    var id, send_program_from_file, user;
    id = req.params.id;
    user = current_user(req);
    if (_.isString(id)) {
      id = parseInt(id);
      id = "" + id;
    }
    send_program_from_file = function() {
      var mp_path;
      mp_path = path.join('..', 'mp', id, 'template_program.cu');
      if (!fs.existsSync(mp_path)) {
        return res.render('404', {
          msg: 'mp' + id + '.markdown not found'
        });
      } else {
        return fs.readFile(mp_path, 'ascii', function(err, data) {
          if (err) {
            return res.render('404', {
              msg: 'Unable to read mp' + id + '.markdown'
            });
          } else {
            return res.send(data);
          }
        });
      }
    };
    return attempts.find_attempt(user, id, function(err, data) {
      var attempt, attempts_submitted, program;
      if (err || !(data != null)) {
        return send_program_from_file();
      } else {
        attempts_submitted = _.filter(data.attempts, function(attempt) {
          return (attempt.submitted_program != null) || (attempt.saved_program != null);
        });
        if (attempts_submitted.length === 0) {
          return send_program_from_file();
        } else {
          attempt = _.last(attempts_submitted);
          if (attempt.saved_program != null) {
            program = attempt.saved_program;
          } else if ((attempt.submitted_program != null) || program === '') {
            program = attempt.submitted_program;
          } else {
            program = '';
          }
          if (!(program != null) || program === 'reset' || program === '') {
            return send_program_from_file();
          } else {
            return res.send(program);
          }
        }
      }
    });
  });

  app.get('/mp/0', is_authenticated, function(req, res) {
    var user;
    user = current_user(req);
    if (user === "unknown_user") {
      res.render('404', {
        msg: "Invalid login. Try logging out and back in again."
      });
      return;
    }
    return res.render('mp0', {
      title: "MP 0"
    });
  });

  app.get('/mp/:id', is_authenticated, function(req, res) {
    var mp_id, user;
    mp_id = req.params.id;
    if (_.isString(mp_id)) {
      mp_id = parseInt(mp_id);
    }
    user = current_user(req);
    if (user === "unknown_user") {
      res.render('404', {
        msg: "Invalid login. Try logging out and back in again."
      });
      return;
    }
    if (mp_id < 0 || mp_id > current_mp) {
      return res.render('404', {
        msg: "Invalid MP"
      });
    } else {
      return res.render('mp', {
        title: "MP " + req.params.id
      });
    }
  });

  app.get('/mp/:id/attempt_count', is_authenticated, function(req, res) {
    var mp_id, user;
    mp_id = req.params.id;
    user = current_user(req);
    attempts.find_attempt(user, mp_id, function(err, data) {
      if (err) {
        return res.render('500');
      } else if (data != null) {
        attempts = _.filter(data.attempts, function(attempt) {
          return attempt.ProgramText != null;
        });
        return res.send(attempts.length);
      } else {
        return res.send(0);
      }
    });
    return null;
  });

  app.get('/mp/:id/attempt_summary', is_authenticated, function(req, res) {
    var mp_id, user;
    user = current_user(req);
    mp_id = req.params.id;
    attempts.find_attempt(user, mp_id, function(err, data) {
      var attempts_summary;
      if (err) {
        return res.render('500');
      } else if (!(data != null)) {
        return res.send([]);
      } else {
        attempts_summary = _.filter(data.attempts, function(attempt) {
          return !(attempt.submitted_program != null) && !attempt.saved_program;
        });
        attempts_summary = _.map(attempts_summary, function(attempt) {
          var correct, dataset_id, run_time, solution_message;
          run_time = attempt.ProgramElapsedTime != null ? attempt.ProgramElapsedTime : 0;
          correct = attempt.SolutionData != null ? attempt.SolutionData.CorrectQ : false;
          solution_message = attempt.SolutionData != null ? attempt.SolutionData.Message : 'Failed to determine solution';
          dataset_id = attempt.SolutionData != null ? attempt.SolutionData.DatasetId : -1;
          return {
            id: attempt.id,
            created_on: attempt.created_on,
            elapsed_time: attempt.elapsed_time,
            compile_failed: _.isString(attempt.CompileFailed),
            program_failed: _.isString(attempt.ProgramFailed),
            correct: correct,
            solution_message: solution_message,
            run_time: run_time,
            dataset_id: dataset_id
          };
        });
        if (attempts_summary.length > 5) {
          attempts_summary = attempts_summary.slice(-5);
        }
        return res.send(attempts_summary);
      }
    });
    return null;
  });

  app.get('/mp/:id/attempt/:attempt_id', is_authenticated, function(req, res) {
    var mp_id, user;
    mp_id = req.params.id;
    if (_.isString(mp_id)) {
      mp_id = parseInt(mp_id);
    }
    user = current_user(req);
    if (user === "unknown_user") {
      res.render('404', {
        msg: "Invalid login. Try logging out and back in again."
      });
      return;
    }
    if (mp_id < 0 || mp_id > current_mp) {
      return res.render('404', {
        msg: "Invalid MP"
      });
    } else {
      return res.render('attempt', {
        title: "Attempt for MP " + req.params.id
      });
    }
  });

  app.get('/mp/:id/attempt_description/:attempt_id', is_authenticated, function(req, res) {
    var mp_id, user;
    user = current_user(req);
    mp_id = req.params.id;
    attempts.find_attempt(user, mp_id, function(err, data) {
      var attempt, attempt_id;
      if (err) {
        return res.send(500, 'Something broke!');
      } else if (!(data != null)) {
        return res.send(void 0);
      } else {
        attempt_id = parseInt(req.params.attempt_id);
        attempt = _.find(data.attempts, function(attempt) {
          return attempt.id === attempt_id;
        });
        if (attempt != null) {
          data = attempt.ProgramText;
          if (data != null) {
            return res.send(data);
          } else {
            return res.send("Program not found");
          }
        } else {
          return res.send(void 0);
        }
      }
    });
    return null;
  });

  app.get('/mp/:id/program/:attempt_id', is_authenticated, function(req, res) {
    var mp_id, user;
    user = current_user(req);
    mp_id = req.params.id;
    attempts.find_attempt(user, mp_id, function(err, data) {
      var attempt, attempt_id, html;
      if (err) {
        return res.send(500, 'Something broke!');
      } else if (!(data != null)) {
        return res.send(void 0);
      } else {
        attempt_id = parseInt(req.params.attempt_id);
        attempt = _.find(data.attempts, function(attempt) {
          return attempt.id === attempt_id;
        });
        if (attempt != null) {
          data = attempt.ProgramText;
          if (data != null) {
            data = data.split("\n");
            data = _.map(data, function(line) {
              return "\t" + line;
            });
            data = data.join("\n");
            html = markdown(data);
            return res.send(html);
          } else {
            return res.send("Program not found");
          }
        } else {
          return res.send(void 0);
        }
      }
    });
    return null;
  });

  app.get('/mp/:id/attempt/:attempt_id', is_authenticated, function(req, res) {
    var mp_id, user;
    user = current_user(req);
    mp_id = req.params.id;
    attempts.find_attempt(user, mp_id, function(err, data) {
      var attempt, attempt_id;
      if (err) {
        return res.send(500, 'Something broke!');
      } else if (!(data != null)) {
        return res.send(void 0);
      } else {
        attempt_id = parseInt(req.params.attempt_id);
        attempt = _.find(data.attempts, function(attempt) {
          return attempt.id === attempt_id;
        });
        if (attempt != null) {
          return res.send(attempt);
        } else {
          return res.send(void 0);
        }
      }
    });
    return null;
  });

  app.get('/workers', function(req, res) {
    return res.send(scheduler.daemons);
  });

  app.get('/worker/:host', function(req, res) {
    return scheduler.worker_info(req.params.host, function(err, info) {
      if (err) {
        return res.send({});
      } else {
        return res.send(info);
      }
    });
  });

  app.get('/worker/log/:host', function(req, res) {
    return scheduler.worker_log(req.params.host, function(err, info) {
      if (err) {
        return res.send({});
      } else {
        return res.send(info);
      }
    });
  });

  app.use(function(req, res, next) {
    return res.render('404', {
      msg: 'Page not found'
    });
  });

  app.use(function(err, req, res, next) {
    console.error(err.stack);
    return res.render('500');
  });

  address = {
    'port': app.get('port'),
    'address': 'localhost'
  };

  if (!module.parent) {
    port = app.get('port');
    console.log("Express server listening on port " + port);
    server = app.listen(port);
    address = server.address();
    if (address.address === '0.0.0.0') {
      os = require('os');
      ifaces = os.networkInterfaces();
      _.each(ifaces, function(dev, key) {
        return _.each(dev, function(detail) {
          if (detail.family === 'IPv4' && detail.internal === false) {
            return address.address = detail.address;
          }
        });
      });
    }
    console.log("address = " + address.address);
    //(require('look')).start(config.look_port, address.address);
    //oauth.setup(address);
  }

  exports.address = address;

}).call(this);
