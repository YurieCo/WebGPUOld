// Generated by CoffeeScript 1.3.3
(function() {
  var OAuth, call_back_address, coursera_access_token_address, coursera_get_identity_address, coursera_oauth_consumer_key, coursera_oauth_consumer_secret, coursera_provider_url, coursera_request_token_address, get_login_credentials, login, login_callback, oa, setup;

  OAuth = (require('oauth')).OAuth;

  coursera_oauth_consumer_key = '';

  coursera_oauth_consumer_secret = '';

  coursera_provider_url = 'https://authentication.coursera.org/auth/oauth/api/';

  coursera_request_token_address = 'https://authentication.coursera.org/auth/oauth/api/request_token';

  coursera_access_token_address = 'https://authentication.coursera.org/auth/oauth/api/access_token';

  coursera_get_identity_address = 'https://authentication.coursera.org/auth/oauth/api/get_identity';

  call_back_address = void 0;

  oa = void 0;

  setup = function(address) {
    call_back_address = "http://" + address.address;
    if (address.port !== 80) {
      call_back_address += ":" + address.port;
    }
    call_back_address += "/login/callback";
    return oa = new OAuth(coursera_request_token_address, coursera_access_token_address, coursera_oauth_consumer_key, coursera_oauth_consumer_secret, "1.0", call_back_address, "HMAC-SHA1");
  };

  login = function(req, res) {
    return oa.getOAuthRequestToken(function(err, oauth_token, oauth_token_secret, data) {
      if (err) {
        return res.send(404, 'was not able to login');
      } else {
        req.session.oauth = oa;
        req.session.oauth.token = oauth_token;
        req.session.oauth.token_secret = data.oauth_secret;
        return res.redirect(data.authentication_url + "?oauth_token=" + oauth_token);
      }
    });
  };

  login_callback = function(req, res, redirect) {
    var oauth;
    if (req.session.oauth) {
      req.session.oauth.verifier = req.query.oauth_verifier;
      oauth = req.session.oauth;
      return oa.getOAuthAccessToken(oauth.token, oauth.token_secret, oauth.verifier, function(err, oauth_access_token, oauth_access_token_secret, results) {
        if (err) {
          return res.send(404, 'Was not able to perform oauth login.');
        } else {
          req.session.oauth.access_token = oauth_access_token;
          req.session.oauth.access_token_secret = oauth_access_token_secret;
          return get_login_credentials(req, res, redirect);
        }
      });
    } else {
      return res.send(404, 'Was not able to perform oauth login');
    }
  };

  get_login_credentials = function(req, res, redirect) {
    var oauth;
    if (req.session.oauth) {
      oauth = req.session.oauth;
      return oa.getProtectedResource(coursera_get_identity_address, "GET", oauth.access_token, oauth.access_token_secret, function(err, data, response) {
        if (err) {
          return res.send(404, "Unable to get login credentials");
        } else {
          req.session.user_data = data;
          req.session.user_id = data.id;
          return res.redirect(redirect);
        }
      });
    } else {
      return res.send(404, 'Was not able to get login credentials');
    }
  };

  exports.setup = setup;

  exports.login = login;

  exports.login_callback = login_callback;

}).call(this);
