// Generated by CoffeeScript 1.3.3
(function() {
  var AttemptsProvider, AuthProvider, Db, DbProvider, Server, config, db, mongodb, _;

  mongodb = require('mongodb');

  config = require('./config');

  _ = require('underscore');

  Db = mongodb.Db;

  Server = mongodb.Server;

  db = new Db(config.db_name, new Server(config.db_address, config.db_port, {
    auto_reconnect: true
  }, {}));

  DbProvider = function(collection_name) {
    return this.collection_name = collection_name;
  };

  DbProvider.prototype.get_collection = function(call_back) {
    var collection_name, _get_collection;
    collection_name = this.collection_name;
    _get_collection = function() {
      return db.createCollection(collection_name, function(err, col) {
        return db.collection(collection_name, {
          safe: true
        }, function(err, collection) {
          if (err) {
            return call_back(err);
          } else {
            return call_back(null, collection);
          }
        });
      });
    };
    if (db.openCalled) {
      _get_collection();
    } else {
      db.open(function(err, res) {
        if (err) {
          return call_back(err);
        } else {
          console.log('Connected to database :: ' + config.db_name);
          return _get_collection();
        }
      });
    }
    return null;
  };

  DbProvider.prototype.find_all = function(call_back) {
    this.get_collection(function(err, collection) {
      if (err) {
        return call_back(err);
      } else {
        return collection.find().toArray(function(err, res) {
          if (err) {
            return call_back(err);
          } else {
            return call_back(null, res);
          }
        });
      }
    });
    return null;
  };

  DbProvider.prototype.find_user = function(user, call_back) {
    this.get_collection(function(err, collection) {
      if (err) {
        return call_back(err);
      } else {
        return collection.findOne({
          user: user
        }, function(err, result) {
          if (err || !(result != null)) {
            return call_back(err);
          } else {
            if (result && result.length > 0) {
              result = result[0];
            }
            return call_back(null, result);
          }
        });
      }
    });
    return null;
  };

  DbProvider.prototype.find_attempt = function(user, mp_id, call_back) {
    this.get_collection(function(err, collection) {
      if (err) {
        return call_back(err);
      } else {
        return collection.findOne({
          user: user,
          mp_id: mp_id
        }, function(err, result) {
          if (err || !(result != null)) {
            return call_back(true);
          } else {
            if (result.length > 0) {
              result = result[0];
            }
            return call_back(null, result);
          }
        });
      }
    });
    return null;
  };

  DbProvider.prototype._save = function(data, call_back) {
    this.get_collection(function(err, collection) {
      if (err) {
        return call_back(err);
      } else {
        data.created_at = new Date();
        data.updated_on = new Date();
        return collection.insert(data, {
          safe: true
        }, function(err, obj) {
          return call_back(err, obj);
        });
      }
    });
    return null;
  };

  DbProvider.prototype.new_user = function(user, call_back) {
    return this._save(user, call_back);
  };

  DbProvider.prototype.update = function(user, hash, call_back) {
    this.get_collection(function(err, collection) {
      if (err) {
        return call_back(err);
      } else {
        return collection.update({
          user: user
        }, {
          $set: {
            pass: hash,
            updated_on: new Date()
          }
        }, {
          safe: true
        }, function(err) {
          return call_back(err);
        });
      }
    });
    return null;
  };

  DbProvider.prototype.new_attempt = function(user, mp_id, attempt, call_back) {
    mp_id = '' + mp_id;
    return this._save({
      user: user,
      mp_id: mp_id,
      attempts: [attempt]
    }, call_back);
  };

  DbProvider.prototype.add_attempt = function(user, mp_id, attempt, call_back) {
    var self;
    mp_id = '' + mp_id;
    self = this;
    if (user === 'test' && !(attempt.submitted_program != null)) {
      attempt.ProgramText = '';
    }
    this.find_attempt(user, mp_id, function(err, res) {
      if (res == undefined) {
           attempt.id = 0;
      } else {
           attempt.id = res.attempts.length + 1;
      }
      if (err) {
        return self.new_attempt(user, mp_id, attempt, function(err, res) {
          if (err) {
            return call_back(err);
          } else {
            return call_back(null);
          }
        });
      } else {
        return self.get_collection(function(err, collection) {
          var update;
          if (err) {
            return call_back(err);
          } else {
            if (attempt.saved_program != null) {
              update = {
                $push: {
                  attempts: attempt
                }
              };
            } else if (attempt.submitted_program != null) {
              update = {
                $push: {
                  attempts: attempt
                },
                $set: {
                  updated_on: new Date(),
                  submitted_on: new Date()
                }
              };
            } else {
              update = {
                $push: {
                  attempts: attempt
                },
                $set: {
                  updated_on: new Date()
                }
              };
            }
            return collection.update({
              user: user,
              mp_id: mp_id
            }, update, {
              safe: true
            }, function(err) {
              return call_back(err);
            });
          }
        });
      }
    });
    return null;
  };

  DbProvider.prototype.for_each_attempt = function(user, mp_id, call_back) {
    mp_id = '' + mp_id;
    this.find_attempt(user, mp_id, function(err, res) {
      if (err) {
        return call_back(err);
      } else {
        return call_back(null, res.attempts);
      }
    });
    return null;
  };

  DbProvider.prototype.last_attempt_date = function(user, mp_id, call_back) {
    mp_id = '' + mp_id;
    this.find_attempt(user, mp_id, function(err, res) {
      if (err) {
        return call_back(err);
      } else {
        return call_back(null, res.submitted_on);
      }
    });
    return null;
  };

  AuthProvider = new DbProvider(config.db_collection_auth_name);

  AttemptsProvider = new DbProvider(config.db_collection_attempt_name);

  exports.AuthProvider = AuthProvider;

  exports.AttemptsProvider = AttemptsProvider;

}).call(this);
