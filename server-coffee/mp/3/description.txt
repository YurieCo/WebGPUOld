### MP3: Tiled Matrix-Matrix Multiplication


#### Objective

Implement a tiled dense matrix multiplication routine using shared memory.

#### Prerequisites

Before starting this lab, make sure that:

* You have completed MP2

* You can have completed lecture 4.1 through 4.4 as well as lectures 5.3 and 5.4

#### Instruction

Edit the code in the code tab to perform the following:

- allocate device memory
- copy host memory to device
- initialize thread block and kernel grid dimensions
- invoke CUDA kernel
- copy results from device to host
- deallocate device memory
- implement the matrix-matrix multiplication routine using shared memory and tiling

Instructions about where to place each part of the code is
demarcated by the `//@@` comment lines.

#### Grading

You will be grading based on the following rubric:

- Compilation (no warning): 15%
- Run time (with respect to other students): 10%
- Correctness (deals with rectangular matrices and boundary conditions correctly): 75%

If we cannot compile your program, then you will get 0 points.
Note that we only grade the last program submitted and do not accept
programs beyond the deadline.

For the run time grade, we will take the average time of all the final submissions. If your time is no more than 10% above the average time, then you will get full marks. Otherwise, you will lose points.

Note that the datasets that we test against are not the same as the ones provided, so make sure to code the algorithm for correctness on general datasets not just the ones provided.


#### Suggestions

* Develop your application incrementally

* Check for CUDA errors, here is some example `wbCheck` that you can use (included in the template code):
    

         #define wbCheck(stmt) do {                                 \
                 cudaError_t err = stmt;                            \
                 if (err != cudaSuccess) {                          \
                     wbLog(ERROR, "Failed to run stmt ", #stmt);    \
                     return -1;                                     \
                 }                                                  \
             } while(0)

using this in your code would look like `wbCheck(cudaMalloc(...))`

* Make sure that your algorithm handles boundary conditions where the size of the matrix may not be a multiple of the block/tile size

* Make sure that your algorithm handles rectangular matrices, not just square matrices as shown in the slides.

* Do not modify the template code written -- only insert code where the `//@@` demarcation is placed

* Do not wait until the last minute to attempt the lab

* Make sure that you test your program using all the datasets provided (the datasets can be selected using the dropdown next to the submission button)

* Even though you can submit multiple times, only your last submission is graded

